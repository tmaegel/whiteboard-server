/**
 * user module
 * @module models/user.model
 * @requires models/sqlite.model
 */

const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

// Importing objects
const User = require('../obj/User');
const database = require("./sqlite.model.js");
const cmdline = require("../cmdline");

/**
 * Verify the token
 * @param {string} token - The token generated by sign()
 * @see models/user.model/sign
 * @returns {Promise} Promise object represents the object of the decoded token.
 */
function validate(token) {
    return new Promise((resolve, reject) => {
        if (!token) {
            reject(new Error("No token provided"));
        } else {
            jwt.verify(token, cmdline.config.secret, function(error, decoded) {
                if (error) {
                    console.log("DEBUG: user.model.js :: validate() ::", error.message);
                    reject(new Error("Failed to authenticate token"));
                } else {
                    resolve(decoded);
                }
            });
        }
    });
}

/**
 * Compare the password hash with the password that passed from the user input
 * and generate a valid token.
 * @param {object} object - The user object stored in the database.
 * @param {integer} object.id - The user id stored in the database.
 * @param {string} object.name - The username stored in the database.
 * @param {string} object.password - The password hash stored in the database.
 * @param {string} hash - The password hash stored in the database.
 * @param {string} password - The password entered by the user.
 * @see models/user.model/login
 * @returns {Promise} Promise object represents the valid token only.
 */
function sign(object, hash, password) {
    return new Promise((resolve, reject) => {
        bcrypt.compare(password, hash, function(error, matched) {
            if (error) {
                console.log("DEBUG: user.model.js :: sign() ::", error.message);
                reject(error);
            } else if (!matched) {
                reject(new Error("password is invalid"));
            } else {
                // create a token
                let user = new User(object.id, object.name);
                let token = jwt.sign({ id: user._id, sub: user.sub, name: user.name }, cmdline.config.secret, {
                    expiresIn: 604800 // expires in 7*24 hours
                });
                resolve(token);
            }
        });
    });
}

/**
 * Get the data of user with the username
 * @param {string} username - The name of the user that should be select.
 * @returns {Promise} Promise object represents the object of the user.
 */
function login(username) {
    return new Promise((resolve, reject) => {
        database.db.get("SELECT id, name, password FROM table_users WHERE name = ? LIMIT 1", [username], function(error, result) {
            if (error) {
                console.log("DEBUG: user.model.js :: login() ::", error.message);
                reject(error);
            } else {
                resolve(result);
            }
        });
    });
}

module.exports = {
    validate,
    sign,
    login,
};
